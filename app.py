
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import nltk
import streamlit as st
import pandas as pd
import spacy
import pyinflect
import random     
import numpy as np
import contractions
from ast import literal_eval

from create_exercise import Create_exercise

random.seed(42)
# page_bg_img = '''
# <style>
# .stApp {
# background-image: url("https://images.unsplash.com/photo-1542281286-9e0a16bb7366");
# background-size: cover;
# }
# </style>
# '''

# st.markdown(page_bg_img, unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å 
nlp = spacy.load("en_core_web_sm") 

nltk.download('punkt')



st.header('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É')
st.subheader('–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è')

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
create_exercise = Create_exercise()   

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
text = st.text_area('–í—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç', create_exercise.get_text())

# –°–ª–∑–¥–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
exercise_type = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', ['', '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –≥–ª–∞–≥–æ–ª–∞',
                                                                   '–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ', '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å', '–†–∞—Å—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–ª–æ–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'], format_func=lambda x: '–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ' if x == '' else x)
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
if exercise_type:
    st.success(exercise_type)
else:
    st.warning('–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è')

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏
num_of_sentenses = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', 0, 20, 5)
st.write("–í –∑–∞–¥–∞–Ω–∏—è—Ö –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è", num_of_sentenses, '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')

# –ú–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
text = create_exercise.clear_text(text)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
df = create_exercise.create_df()

# –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–æ—Ä–º—ã –≥–ª–∞–≥–æ–ª–æ–≤ –∫ –ø–æ–ª–Ω–æ–π
text = create_exercise.contracted_text(text)

# –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –î–§
df_sentences = create_exercise.tokenization(text)    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –î–§
df = create_exercise.select_exercise(df_sentences, exercise_type)
 
# –î–µ–ª–∞–µ–º —Å—Ä–µ–∑ –î–§ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π 
df = df[0:num_of_sentenses]

# –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç
for index, row in df.iterrows():
    counter = 0               
    col1, col2 = st.columns(2)
    with col1:
        st.write(str(row['sentence_hidden'])) 

    with col2:
        option = []
        for i in range(len(row['options'])):
            #key+=1
            option = row['options'][i]
            random.shuffle(option)
            option = ['‚Äì‚Äì‚Äì'] + option
            df['result'][index] =  st.selectbox('nolabel', option, label_visibility="hidden", key = str(random.random())) #str(key)

            if df['result'][index] == '‚Äì‚Äì‚Äì':
                pass

            elif df['result'][index] == str(row['answer'][i]):
                st.success('–≠—Ç–æ –ø—Ä–∞–≤–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', icon="‚úÖ")
                counter += 1
                if counter == len(row['options']):
                    st.success(df['sentence'][index])
            
            else:
                st.error('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', icon="üòü")
            
    st.write('----------------------')   
            
#st.write(df)